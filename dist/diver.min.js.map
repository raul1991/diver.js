{"version":3,"sources":["diver.js"],"names":["diver","utilities","createHierarchy","obj","group","name","value","array","split","temp","len","length","target","undefined","i","getChildNodes","node","nodeName","toLowerCase","elements","childNodes","getValue","element","isBooleanType","type","checked","innerHTML","href","options","selectedIndex","delimiter","getAttribute","values","concat","dumpValue","currentChild","traverse","id","elementToTraverse","document","getElementById","isSelect","currentElementLength","children","ch","hasOwnProperty","nodeType"],"mappings":";;;;;;;;AAKA,GAAAA,OAAA,WACA,GAAAC,IAEAC,gBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAEAC,GAAAH,EAAAI,MAAA,KACAC,EAAAN,EACAO,EAAAH,EAAAI,OACAC,EAAAL,EAAAG,EAAA,EAEA,IAAA,GAAAA,EAEAG,SAAAV,EAAAC,KACAD,EAAAC,OAEAD,EAAAC,GAAAC,GAAAC,MAIA,KAAA,GAAAQ,GAAA,EAAAA,EAAAJ,EAAAI,IAEAL,EADAI,SAAAJ,EAAAF,EAAAO,IACAL,EAAAF,EAAAO,OAGAL,EAAAF,EAAAO,IAIAF,IAAAL,EAAAO,KACAL,EAAAJ,GAAAC,EAKA,OAAAH,IAEAY,cAAA,SAAAC,GACA,OAAAA,EAAAC,SAAAC,eACA,IAAA,OACA,MAAAF,GAAAG,QACA,KAAA,SACA,MAAAH,EACA,SACA,MAAAA,GAAAI,aAIAC,SAAA,SAAAC,GACA,GAEAC,GAAA,SAAAD,EAAAE,MAAA,YAAAF,EAAAE,IACA,IAAAD,EAAA,MAAAD,GAAAG,OAEA,QAAAH,EAAAL,SAAAC,eACA,IAAA,OACA,IAAA,MACA,IAAA,KACA,MAAAI,GAAAI,SACA,KAAA,IACA,MAAAJ,GAAAK,IACA,KAAA,WACA,MAAAL,GAAAG,OACA,KAAA,SACA,GAAAG,GAAAN,EAAAM,OACA,OAAAA,GAAAA,EAAAC,eAAAvB,KACA,SAEA,GAAAwB,GAAAR,EAAAS,aAAA,cAAAlB,MACA,IAAAiB,EAAA,CACA,GAAAE,KAEA,OADAA,GAAAA,EAAAC,OAAAX,EAAAhB,MAAAE,MAAAsB,IAGA,MAAAR,GAAAhB,QAIA4B,UAAA,SAAAC,EAAAhC,GACA,GAAAC,GAAA+B,EAAAJ,aAAA,UAAAlB,OACAR,EAAA8B,EAAAJ,aAAA,QACAzB,EAAAL,EAAAoB,SAAAc,EAEAA,GAAAJ,aAAA,cAAAlB,MAQA,OANAT,GAIAD,EAAAF,EAAAC,gBAAAC,EAAAC,EAAAC,EAAAC,GAHAH,EAAAE,GAAAC,GAAA,GAKAH,GAGA,QACAiC,SAAA,QAAAA,GAAAC,EAAAlC,GACA,GACAmC,GAAAC,SAAAC,eAAAH,IAAAA,EACAI,EAAA,UAAAH,EAAArB,SAAAC,cACAwB,EAAAJ,EAAAlB,WAAAT,MAEA,IAAA+B,EAAA,IAAAD,EAAA,CAEA,GAAAE,GAAA1C,EAAAc,cAAAuB,EACA,KAAA,GAAAM,KAAAD,GACA,GAAAA,EAAAE,eAAAD,GAAA,CACA,GAAAT,GAAAQ,EAAAC,EAEA,IAAAT,EAAAW,WAGA,GAAAX,EAAAW,UAAAX,EAAAf,WAAAT,OAAA,EACAyB,EAAAD,EAAAhC,GAEA,GAAAgC,EAAAW,UAAA,MAAAX,EAAAJ,aAAA,UACA5B,EAAAF,EAAAiC,UAAAC,EAAAhC,UAQAA,GAAAF,EAAAiC,UAAAI,EAAAnC,EAEA,OAAAA","file":"diver.min.js","sourcesContent":["/**\r\n * Makes an object full of valid input values.\r\n * @param id :  Id of the container.\r\n * @param obj : Object to populate with values\r\n */\r\nvar diver = (function (){\r\n    var utilities =\r\n    {\r\n      createHierarchy : function createHierarchy(obj, group, name, value){\r\n          var methodName = \"createHierarchy\";\r\n\r\n          var array = group.split(\".\");\r\n          var temp = obj;\r\n          var len  = array.length;\r\n          var target = array[len - 1];\r\n          \r\n          if(len == 1) {\r\n            //single objects like : foo\r\n            if(obj[group] ===  undefined) {\r\n              obj[group] = {};\r\n            }\r\n            obj[group][name] = value;\r\n          }\r\n          else {\r\n            //nested objects like : foo.bar.more\r\n            for(var i = 0; i < len; i++) {\r\n               if(temp[array[i]] === undefined) {\r\n                 temp = temp[array[i]] = {};\r\n               }\r\n               else {\r\n                temp = temp[array[i]];\r\n               }\r\n\r\n               //value must be assigned only if it's the deepest object.\r\n               if(target === array[i]) {\r\n                  temp[name] = value;\r\n               }\r\n            }  \r\n          }\r\n          \r\n          return obj;\r\n      },\r\n      getChildNodes : function getChildNodes(node) {\r\n          switch (node.nodeName.toLowerCase()) {\r\n              case \"form\":\r\n                  return node.elements;\r\n              case \"select\":\r\n                  return node;\r\n              default :\r\n                  return node.childNodes;\r\n          }\r\n\r\n      },\r\n      getValue : function getValue(element) {\r\n          var methodName = \"getValue\";\r\n          //for checkboxes and radio buttons\r\n          var isBooleanType = ((element.type == \"radio\") || (element.type == \"checkbox\"));\r\n          if(isBooleanType) return element.checked;\r\n\r\n          switch (element.nodeName.toLowerCase()) {\r\n              case \"span\":\r\n              case \"div\":\r\n              case \"h1\" || \"h2\" || \"h3\" || \"h4\" || \"h5\" || \"h6\":\r\n                  return element.innerHTML;\r\n              case \"a\":\r\n                  return element.href;\r\n              case \"checkbox\" || \"radio\":\r\n                  return element.checked;\r\n              case \"select\":\r\n                  var options = element.options;\r\n                  return options[options.selectedIndex].value;\r\n              default:\r\n                  //input\r\n                  var delimiter = element.getAttribute('delimiter') || undefined;\r\n                  if(delimiter) {\r\n                    var values = [];\r\n                    values = values.concat(element.value.split(delimiter));\r\n                    return values;\r\n                  }\r\n                  return element.value;\r\n          }\r\n          \r\n      },\r\n      dumpValue : function dumpValue(currentChild, obj) {\r\n        var group = currentChild.getAttribute('group') || undefined;\r\n        var name = currentChild.getAttribute('name');\r\n        var value = utilities.getValue(currentChild);\r\n        //todo: Add support for this soon.\r\n        var dataType = currentChild.getAttribute('data-type') || undefined;\r\n\r\n        if(!group){\r\n          obj[name] = value || \"\";\r\n        }\r\n        else{\r\n          obj = utilities.createHierarchy(obj, group, name, value);\r\n        }\r\n        return obj;\r\n      }\r\n    };\r\n    return {\r\n      traverse : function traverse(id, obj) {\r\n        var methodName = \"traverse\";\r\n        var elementToTraverse = document.getElementById(id) || id;\r\n        var isSelect = (elementToTraverse.nodeName.toLowerCase() == \"select\");\r\n        var currentElementLength = elementToTraverse.childNodes.length;\r\n\r\n        if (currentElementLength > 0 && !isSelect) {\r\n\r\n            var children = utilities.getChildNodes(elementToTraverse);\r\n            for (var ch in children) {\r\n                if(!children.hasOwnProperty(ch)) continue;\r\n                var currentChild = children[ch];\r\n                //ignore the text nodes\r\n                if (currentChild.nodeType != 1) {\r\n                    continue;\r\n                }\r\n                else if (currentChild.nodeType == 1 && currentChild.childNodes.length > 0) {\r\n                    traverse(currentChild, obj);\r\n                }\r\n                else if (currentChild.nodeType == 1 && currentChild.getAttribute('name') != null) {\r\n                    obj = utilities.dumpValue(currentChild, obj);\r\n                }\r\n                else {\r\n                    //catch exception\r\n                }\r\n            }\r\n        }\r\n        else {\r\n          obj = utilities.dumpValue(elementToTraverse, obj);\r\n        }\r\n        return obj;\r\n      }\r\n    }\r\n})();\r\n"]}